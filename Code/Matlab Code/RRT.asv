ss = stateSpaceSE2;
sv = validatorOccupancyMap(ss);
load exampleMaps.mat
map1 = occupancyMap(complexMap,1);
show(map1)
sv.Map = map1;
sv.ValidationDistance = 0.5;
ss.StateBounds = [map1.XWorldLimits; map1.YWorldLimits; [-pi pi]];
planner = plannerRRTStar(ss,sv);
planner.ContinueAfterGoalReached = true;
planner.MaxIterations = 3000;
planner.MaxConnectionDistance = 2.5;
start = [3,3, 0];
for i= 1:3
goal = [pose,10, 0];
rng(100, 'twister') % repeatable result
[pthObj, solnInfo] = plan(planner,start,goal);
map1.show;
hold on;
scatter(start(1),start(2),'filled')
scatter(goal(1),goal(2),'filled')
%plot(solnInfo.TreeData(:,1),solnInfo.TreeData(:,2), '.-'); % tree expansion
plot(pthObj.States(:,1),pthObj.States(:,2),'b-','LineWidth',2); % draw path
title('Optimal Route to Obejct i')
legend('Start Point','Object Postion','Path')
end